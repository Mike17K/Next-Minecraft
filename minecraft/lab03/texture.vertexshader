#version 330 core


#define CHUNK_SIZE 16

#define BLOCK_SIZE_X 1
#define BLOCK_SIZE_Y 1
#define BLOCK_SIZE_Z 1


layout(location = 0) in int vertex_data_low;
layout(location = 1) in int vertex_data_high;
layout(location = 2) in int vertexInfo;


uniform float time;

uniform mat4 lightVP;

out vec3 vertex_position_worldspace;

out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec4 vertex_position_lightspace; // shading
out vec3 normal;

struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    vec3 lightDirection;
    float power;
};
uniform Light light;


uniform mat4 MVP;
out vec2 vertex_UV;
out float visibility;
flat out int material; 






// texture dencription
// side normals: 0: (0,-1,0), 1: (0,1,0), 2: (0,0,1), 3: (0,0,-1), 4: (-1,0,0), 5: (1,0,0),  
int getInfo(int UV, int choice) { //choice: 0=x , 1=y, 2=side for normals , 3: material
    switch (choice) {
    case 0: return (UV & 0x1F);
    case 1: return (UV >> 5) & 0x1F;
    case 2: return (UV>>10) & 0xF;
    case 3: return (UV >> 14) & 0xFF;
    
    }
}

vec3 normalsDecreption(int normal){
    switch (normal) {
    case 0: return vec3(0.0f,-1.0f,0.0f);
    case 1: return vec3(0.0f,1.0f,0.0f);
    case 2: return vec3(0.0f,0.0f,1.0f);
    case 3: return vec3(0.0f,0.0f,-1.0f);
    case 4: return vec3(-1.0f,0.0f,0.0f);
    case 5: return vec3(1.0f,0.0f,0.0f);
    default: return vec3(0.0f,0.0f,0.0f);
    }
}


int getPoint(int data_low,int data_high, int choice) { // axis: 0=x 1=y 2=z 3=index_x 4=index_z
    switch (choice) {
    case 0:
        return ((data_high>>27 ) & 0xF); //extract the x axis int but i only want 4bits
    case 1:
        return ((data_low>>23 ) & 0xFF); //extract the y axis int but i only want 8bits
    case 2:
        return ((data_high>>23 ) & 0xF); //extract the z axis int but i only want 4bits
    case 3:
        if (data_low<0){ //handling negative numbers
            return (0xFF800000 | data_low); //extract the index_x 24bits
        }
        return (data_low & 0x007FFFFF); //extract the index_x 24bits
    case 4:
        if (data_high<0){ //handling negative numbers
            return (0xFF800000 | data_high); //extract the index_x 24bits
        }
        return (data_high & 0x007FFFFF); //extract the index_z 24bits
    }
}

void main()
{
    float x = (getPoint(vertex_data_low,vertex_data_high,0) + getPoint(vertex_data_low,vertex_data_high,3)*CHUNK_SIZE)*BLOCK_SIZE_X;
    float y = getPoint(vertex_data_low,vertex_data_high,1)*BLOCK_SIZE_Y;
    float z = (getPoint(vertex_data_low,vertex_data_high,2) + getPoint(vertex_data_low,vertex_data_high,4)*CHUNK_SIZE)*BLOCK_SIZE_Z;

   
    
    vertex_position_worldspace = vec3(x,y,z);
    vertex_position_cameraspace = (MVP * vec4(vertex_position_worldspace.xyz, 1.0f)).xyz;
    vertex_normal_cameraspace = (MVP * vec4(normalsDecreption(getInfo(vertexInfo,2)).xyz, 0.0f)).xyz;
    vertex_position_lightspace = lightVP * vec4(vertex_position_worldspace, 1.0f);
    

    
    // UV 
    if (getInfo(vertexInfo,0)%2==0){
    vertex_UV = vec2(0.00+getInfo(vertexInfo,0)/16.0,0.00000+(16.0-(getInfo(vertexInfo,1)) / 16.0));
    }else{
    vertex_UV = vec2(0.00+getInfo(vertexInfo,0)/16.0,0.00000+(16.0-(getInfo(vertexInfo,1)) / 16.0));
    }
 
    normal = normalsDecreption(getInfo(vertexInfo,2));
    vertex_normal_cameraspace = (MVP * vec4(normal.xyz,1.0f)).xyz;


    visibility = max(dot(normal,(normalize(-light.lightDirection))),0.25);
    
    material = getInfo(vertexInfo,3);

    if(material==15) {// water
        gl_Position = MVP * (vec4(x,y,z, 1.0f)+vec4(0.0f,-0.5f+0.2*sin(time - 0.2*cos(time)*x - 0.1*sin(time)*y),0.0f,0.0f));
    
    }else{
        gl_Position = MVP * vec4(x,y,z, 1.0f);
    }
}
